{"ast":null,"code":"var _asyncToGenerator = require(\"D:\\\\usyd\\\\2023 season 1\\\\5425\\\\react-tesseract-ocr-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _objectSpread = require(\"D:\\\\usyd\\\\2023 season 1\\\\5425\\\\react-tesseract-ocr-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _objectWithoutProperties = require(\"D:\\\\usyd\\\\2023 season 1\\\\5425\\\\react-tesseract-ocr-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar resolvePaths = require('./utils/resolvePaths');\nvar circularize = require('./utils/circularize');\nvar createJob = require('./createJob');\nvar _require = require('./utils/log'),\n  log = _require.log;\nvar getId = require('./utils/getId');\nvar _require2 = require('./constants/config'),\n  defaultOEM = _require2.defaultOEM;\nvar _require3 = require('./worker/node'),\n  defaultOptions = _require3.defaultOptions,\n  spawnWorker = _require3.spawnWorker,\n  terminateWorker = _require3.terminateWorker,\n  onMessage = _require3.onMessage,\n  loadImage = _require3.loadImage,\n  send = _require3.send;\nvar workerCounter = 0;\nmodule.exports = function () {\n  var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var id = getId('Worker', workerCounter);\n  var _resolvePaths = resolvePaths(_objectSpread({}, defaultOptions, _options)),\n    logger = _resolvePaths.logger,\n    errorHandler = _resolvePaths.errorHandler,\n    options = _objectWithoutProperties(_resolvePaths, [\"logger\", \"errorHandler\"]);\n  var resolves = {};\n  var rejects = {};\n  var worker = spawnWorker(options);\n  workerCounter += 1;\n  var setResolve = function setResolve(action, res) {\n    resolves[action] = res;\n  };\n  var setReject = function setReject(action, rej) {\n    rejects[action] = rej;\n  };\n  var startJob = function startJob(_ref) {\n    var jobId = _ref.id,\n      action = _ref.action,\n      payload = _ref.payload;\n    return new Promise(function (resolve, reject) {\n      log(\"[\".concat(id, \"]: Start \").concat(jobId, \", action=\").concat(action));\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId: jobId,\n        action: action,\n        payload: payload\n      });\n    });\n  };\n  var load = function load(jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'load',\n      payload: {\n        options: options\n      }\n    }));\n  };\n  var writeText = function writeText(path, text, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'writeFile',\n        args: [path, text]\n      }\n    }));\n  };\n  var readText = function readText(path, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'readFile',\n        args: [path, {\n          encoding: 'utf8'\n        }]\n      }\n    }));\n  };\n  var removeFile = function removeFile(path, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'unlink',\n        args: [path]\n      }\n    }));\n  };\n  var FS = function FS(method, args, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: method,\n        args: args\n      }\n    }));\n  };\n  var loadLanguage = function loadLanguage() {\n    var langs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eng';\n    var jobId = arguments.length > 1 ? arguments[1] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: {\n        langs: langs,\n        options: options\n      }\n    }));\n  };\n  var initialize = function initialize() {\n    var langs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eng';\n    var oem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOEM;\n    var jobId = arguments.length > 2 ? arguments[2] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: {\n        langs: langs,\n        oem: oem\n      }\n    }));\n  };\n  var setParameters = function setParameters() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var jobId = arguments.length > 1 ? arguments[1] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: {\n        params: params\n      }\n    }));\n  };\n  var recognize = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(image) {\n      var opts,\n        jobId,\n        _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            jobId = _args.length > 2 ? _args[2] : undefined;\n            _context.t0 = startJob;\n            _context.t1 = createJob;\n            _context.t2 = jobId;\n            _context.next = 7;\n            return loadImage(image);\n          case 7:\n            _context.t3 = _context.sent;\n            _context.t4 = opts;\n            _context.t5 = {\n              image: _context.t3,\n              options: _context.t4\n            };\n            _context.t6 = {\n              id: _context.t2,\n              action: 'recognize',\n              payload: _context.t5\n            };\n            _context.t7 = (0, _context.t1)(_context.t6);\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t7));\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function recognize(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getPDF = function getPDF() {\n    var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tesseract OCR Result';\n    var textonly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var jobId = arguments.length > 2 ? arguments[2] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: {\n        title: title,\n        textonly: textonly\n      }\n    }));\n  };\n  var detect = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image, jobId) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = startJob;\n            _context2.t1 = createJob;\n            _context2.t2 = jobId;\n            _context2.next = 5;\n            return loadImage(image);\n          case 5:\n            _context2.t3 = _context2.sent;\n            _context2.t4 = {\n              image: _context2.t3\n            };\n            _context2.t5 = {\n              id: _context2.t2,\n              action: 'detect',\n              payload: _context2.t4\n            };\n            _context2.t6 = (0, _context2.t1)(_context2.t5);\n            return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t6));\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function detect(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var terminate = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (worker !== null) {\n              /*\n              await startJob(createJob({\n                id: jobId,\n                action: 'terminate',\n              }));\n              */\n              terminateWorker(worker);\n              worker = null;\n            }\n            return _context3.abrupt(\"return\", Promise.resolve());\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function terminate() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  onMessage(worker, function (_ref5) {\n    var workerId = _ref5.workerId,\n      jobId = _ref5.jobId,\n      status = _ref5.status,\n      action = _ref5.action,\n      data = _ref5.data;\n    if (status === 'resolve') {\n      log(\"[\".concat(workerId, \"]: Complete \").concat(jobId));\n      var d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from(_objectSpread({}, data, {\n          length: Object.keys(data).length\n        }));\n      }\n      resolves[action]({\n        jobId: jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(_objectSpread({}, data, {\n        userJobId: jobId\n      }));\n    }\n  });\n  return {\n    id: id,\n    worker: worker,\n    setResolve: setResolve,\n    setReject: setReject,\n    load: load,\n    writeText: writeText,\n    readText: readText,\n    removeFile: removeFile,\n    FS: FS,\n    loadLanguage: loadLanguage,\n    initialize: initialize,\n    setParameters: setParameters,\n    recognize: recognize,\n    getPDF: getPDF,\n    detect: detect,\n    terminate: terminate\n  };\n};","map":null,"metadata":{},"sourceType":"script"}