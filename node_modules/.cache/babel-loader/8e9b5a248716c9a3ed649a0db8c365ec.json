{"ast":null,"code":"/*\n * JavaScript Load Image\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, webkitURL, module */\n\n;\n(function ($) {\n  'use strict';\n\n  /**\n   * Loads an image for a given File object.\n   * Invokes the callback with an img or optional canvas element\n   * (if supported by the browser) as parameter:.\n   *\n   * @param {File|Blob|string} file File or Blob object or image URL\n   * @param {Function} [callback] Image load event callback\n   * @param {object} [options] Options object\n   * @returns {HTMLImageElement|HTMLCanvasElement|FileReader} image object\n   */\n  function loadImage(file, callback, options) {\n    var img = document.createElement('img');\n    var url;\n    /**\n     * Callback for the fetchBlob call.\n     *\n     * @param {Blob} blob Blob object\n     * @param {Error} err Error object\n     */\n    function fetchBlobCallback(blob, err) {\n      if (err) console.log(err); // eslint-disable-line no-console\n      if (blob && loadImage.isInstanceOf('Blob', blob)) {\n        // eslint-disable-next-line no-param-reassign\n        file = blob;\n        url = loadImage.createObjectURL(file);\n      } else {\n        url = file;\n        if (options && options.crossOrigin) {\n          img.crossOrigin = options.crossOrigin;\n        }\n      }\n      img.src = url;\n    }\n    img.onerror = function (event) {\n      return loadImage.onerror(img, event, file, url, callback, options);\n    };\n    img.onload = function (event) {\n      return loadImage.onload(img, event, file, url, callback, options);\n    };\n    if (typeof file === 'string') {\n      if (loadImage.hasMetaOption(options)) {\n        loadImage.fetchBlob(file, fetchBlobCallback, options);\n      } else {\n        fetchBlobCallback();\n      }\n      return img;\n    } else if (loadImage.isInstanceOf('Blob', file) ||\n    // Files are also Blob instances, but some browsers\n    // (Firefox 3.6) support the File API but not Blobs:\n    loadImage.isInstanceOf('File', file)) {\n      url = loadImage.createObjectURL(file);\n      if (url) {\n        img.src = url;\n        return img;\n      }\n      return loadImage.readFile(file, function (e) {\n        var target = e.target;\n        if (target && target.result) {\n          img.src = target.result;\n        } else if (callback) {\n          callback(e);\n        }\n      });\n    }\n  }\n  // The check for URL.revokeObjectURL fixes an issue with Opera 12,\n  // which provides URL.createObjectURL but doesn't properly implement it:\n  var urlAPI = $.createObjectURL && $ || $.URL && URL.revokeObjectURL && URL || $.webkitURL && webkitURL;\n\n  /**\n   * Helper function to revoke an object URL\n   *\n   * @param {string} url Blob Object URL\n   * @param {object} [options] Options object\n   */\n  function revokeHelper(url, options) {\n    if (url && url.slice(0, 5) === 'blob:' && !(options && options.noRevoke)) {\n      loadImage.revokeObjectURL(url);\n    }\n  }\n\n  // Determines if meta data should be loaded automatically.\n  // Requires the load image meta extension to load meta data.\n  loadImage.hasMetaOption = function (options) {\n    return options && options.meta;\n  };\n\n  // If the callback given to this function returns a blob, it is used as image\n  // source instead of the original url and overrides the file argument used in\n  // the onload and onerror event callbacks:\n  loadImage.fetchBlob = function (url, callback) {\n    callback();\n  };\n  loadImage.isInstanceOf = function (type, obj) {\n    // Cross-frame instanceof check\n    return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n  };\n  loadImage.transform = function (img, options, callback, file, data) {\n    callback(img, data);\n  };\n  loadImage.onerror = function (img, event, file, url, callback, options) {\n    revokeHelper(url, options);\n    if (callback) {\n      callback.call(img, event);\n    }\n  };\n  loadImage.onload = function (img, event, file, url, callback, options) {\n    revokeHelper(url, options);\n    if (callback) {\n      loadImage.transform(img, options, callback, file, {\n        originalWidth: img.naturalWidth || img.width,\n        originalHeight: img.naturalHeight || img.height\n      });\n    }\n  };\n  loadImage.createObjectURL = function (file) {\n    return urlAPI ? urlAPI.createObjectURL(file) : false;\n  };\n  loadImage.revokeObjectURL = function (url) {\n    return urlAPI ? urlAPI.revokeObjectURL(url) : false;\n  };\n\n  // Loads a given File object via FileReader interface,\n  // invokes the callback with the event object (load or error).\n  // The result can be read via event.target.result:\n  loadImage.readFile = function (file, callback, method) {\n    if ($.FileReader) {\n      var fileReader = new FileReader();\n      fileReader.onload = fileReader.onerror = callback;\n      // eslint-disable-next-line no-param-reassign\n      method = method || 'readAsDataURL';\n      if (fileReader[method]) {\n        fileReader[method](file);\n        return fileReader;\n      }\n    }\n    return false;\n  };\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return loadImage;\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = loadImage;\n  } else {\n    $.loadImage = loadImage;\n  }\n})(typeof window !== 'undefined' && window || this);","map":null,"metadata":{},"sourceType":"script"}